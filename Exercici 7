#include <stdio.h>     // Para entrada/salida
#include <stdlib.h>    // Para gestión de memoria y números aleatorios
#include <math.h>      // Para funciones matemáticas como sqrt() y fabs()

#define N 512          // Definición de tamaño de vectores y matrices

// Variables globales
float Mat[N][N], MatDD[N][N];
float V1[N], V2[N], V3[N];

// Función de inicialización de datos
void InitData() {
    int i, j;
    srand(334411); // Semilla para generar números pseudo-aleatorios
    for (i = 0; i < N; i++) {
        for (j = 0; j < N; j++) {
            Mat[i][j] = (((i * j) % 3) ? -1 : 1) * (100.0 * (rand() / (1.0 * RAND_MAX)));
            if ((abs(i - j) <= 3) && (i != j))
                MatDD[i][j] = (((i * j) % 3) ? -1 : 1) * (rand() / (1.0 * RAND_MAX));
            else if (i == j)
                MatDD[i][j] = (((i * j) % 3) ? -1 : 1) * (10000.0 * (rand() / (1.0 * RAND_MAX)));
            else MatDD[i][j] = 0.0;
        }
        V1[i] = (i < N / 2) ? (((i * j) % 3) ? -1 : 1) * (100.0 * (rand() / (1.0 * RAND_MAX))) : 0.0;
        V2[i] = (i >= N / 2) ? (((i * j) % 3) ? -1 : 1) * (100.0 * (rand() / (1.0 * RAND_MAX))) : 0.0;
        V3[i] = (((i * j) % 5) ? -1 : 1) * (100.0 * (rand() / (1.0 * RAND_MAX)));
    }
}

// Función para mostrar elementos de un vector
void PrintVect(float vect[N], int from, int numel) {
    for (int i = from; i < from + numel && i < N; i++) {
        printf("%f ", vect[i]); // Corrección en el formato
    }
    printf("\n");
}

// Función para mostrar elementos de una fila de una matriz
void PrintRow(float mat[N][N], int row, int from, int numel) {
    for (int i = from; i < from + numel && i < N; i++) {
        printf("%f ", mat[row][i]); // Corrección en el formato
    }
    printf("\n");
}

// Multiplicación escalar de un vector
void MultEscalar(float vect[N], float vectres[N], float alpha) {
    for (int i = 0; i < N; i++) {
        vectres[i] = vect[i] * alpha;
    }
}

// Producto escalar entre dos vectores
float Scalar(float vect1[N], float vect2[N]) {
    float result = 0;
    for (int i = 0; i < N; i++) {
        result += vect1[i] * vect2[i];
    }
    return result;
}

// Magnitud de un vector
float Magnitude(float vect[N]) {
    return sqrt(Scalar(vect, vect)); // Corrección eliminando el tercer parámetro
}

// Verificar ortogonalidad
int Ortogonal(float vect1[N], float vect2[N]) {
    return Scalar(vect1, vect2) == 0.0 ? 1 : 0;
}

//Función para calcular la proyección de vect1 sobre vect 2
void Projection(float vect1[N], float vect2[N], float vectres[N]) {
    float scalar_prod = Scalar(vect1, vect2) / Scalar(vect2, vect2);
    for (int i = 0; i < N; i++) {
        vectres[i] = scalar_prod * vect2[i];
    }
}
